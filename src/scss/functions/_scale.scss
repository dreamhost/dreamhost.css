@mixin createClasses( $props, $class, $responsive, $relationship:null ) {
	@include createClass( #{$class}-0 #{$relationship}, $props, 0 );
	@include createClass( #{$class}-half #{$relationship}, $props, convertScaleToRem(.5) );
	@include createClass( #{$class}-auto #{$relationship}, $props, auto );
	@for $i from 1 through $maxSize {
		@include createClass( #{$class}-#{$i} #{$relationship}, $props, convertScaleToRem($i) );
	}
	@if $responsive {
		@media screen and ( min-width: $medium-breakpoint ) {
			@for $i from 1 through $maxSize {
				@include createClass( #{$class}-#{$i}__m #{$relationship}, $props, convertScaleToRem($i) );
			}
			@include createClass( #{$class}-0__m #{$relationship}, $props, 0 );
			@include createClass( #{$class}-half__m #{$relationship}, $props, convertScaleToRem(.5) );
			@include createClass( #{$class}-auto__m #{$relationship}, $props, auto );
		}
		@media screen and ( min-width: $large-breakpoint ) {
			@for $i from 1 through $maxSize {
				@include createClass( #{$class}-#{$i}__l #{$relationship}, $props, convertScaleToRem($i) );
			}
			@include createClass( #{$class}-0__l #{$relationship}, $props, 0 );
			@include createClass( #{$class}-half__l #{$relationship}, $props, convertScaleToRem(.5) );
			@include createClass( #{$class}-auto__l #{$relationship}, $props, auto );
		}
	}
}
@mixin createClass( $class, $props, $value ) {
	.#{$class} {
		@each $prop in $props {
			#{$prop}: $value !important;
		}
	}
}
@function convertScaleToRem( $value ) {
	@return convertPxToRem( $value * $baseScale );
}
@function convertPxToRem( $value ) {
	@return ( $value / 16 ) * 1rem;
}
